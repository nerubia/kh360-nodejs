name: Deploy beta

on:
  push:
    branches:
      - beta

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run lint
  build:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run build
  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Get public IP
        id: get-ip
        run: echo "::set-output name=ip_address::$(curl -s https://api64.ipify.org?format=text)"
      - name: Print IP address
        run: echo "Public IP Address ${{ steps.get-ip.outputs.ip_address }}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Authorize Security Group Ingress
        run: |
          aws ec2 authorize-security-group-ingress \
            --region ${{ secrets.AWS_REGION }} \
            --group-id ${{ secrets.AWS_SEC_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.get-ip.outputs.ip_address }}/32

      - uses: actions/checkout@v3
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          HOSTNAME: ${{ secrets.HOST }}
          USER_NAME: ${{ secrets.USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              export NVM_DIR=~/.nvm
              source ~/.nvm/nvm.sh &&
              cd /home/jlerit/kh360-nodejs &&
              pm2 kill &&
              sudo kill -9 $(sudo lsof -t -i :5001) &&
              git pull &&
              npm install &&
              npx prisma migrate deploy &&
              npx prisma generate &&
              npx prisma db seed &&
              npm run build &&
              pm2 start npm -- start
              '

      - name: Revoke Security Group Ingress
        run: |
          aws ec2 revoke-security-group-ingress \
            --region ${{ secrets.AWS_REGION }} \
            --group-id ${{ secrets.AWS_SEC_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.get-ip.outputs.ip_address }}/32
